{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","action.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","position","top","zIndex","padding","background","border","children","SearchBox","SearchChange","type","placeholder","onChange","App","store","useState","searchResults","setSearchResults","text","useSelector","state","searchRobots","searchField","robosUsers","getRobotsReducer","users","dispatch","useDispatch","useEffect","fetch","then","res","json","data","payload","catch","error","filteredRobots","filter","toLowerCase","includes","newRobot","e","setSearchField","target","value","initialState","robotInitialState","pending","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.59906252.chunk.js","sourcesContent":["import React from 'react';\nimport '../style/card.css';\n\nconst Card = ({ name, email, id }) => {\n        return(\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img alt=\"\" src={`https://robohash.org/${id}?size=200x200`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return(\n        <div>\n        {\n            robots.map((user, i) => {\n                return(\n                    <Card key={i} name={robots[i].name} email={robots[i].email} id={robots[i].id} />\n                );\n            })\n        }\n        </div>\n    );\n}\n\n\nexport default CardList;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return(\n        <div style={{position: 'sticky', top: '0', zIndex: '5', padding: '10px', background: 'linear-gradient(to left, rgba(7,27,82,1) 0%, rgba(0,128,128,1) 100%)', border: '1px solid black'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;\n\n// background: linear-gradient(to left, rgba(7,27,82,1) 0%, rgba(0,128,128,1) 100%);","import React from 'react';\n\n\nconst SearchBox = ({ SearchChange }) => {\n    return(\n        <div className=\"pa2\">\n            <input \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\" \n            placeholder=\"search robots\"\n            onChange={SearchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setSearchField, requestRobots } from '../action'\nimport '../style/App.css';\n\nconst App = ({ store }) =>{\n\n    const [searchResults, setSearchResults] = useState([]);\n\n    const text = useSelector(state => state.searchRobots.searchField)\n\n    const robosUsers = useSelector(state => state.getRobotsReducer.users)\n    \n    const dispatch = useDispatch();\n\n    const onSearchChange = (e) => {\n        dispatch(setSearchField(e.target.value))\n    };\n\n    useEffect(() =>  {\n        dispatch(requestRobots());\n    }, [dispatch])\n\n    useEffect(() => {\n        let filteredRobots = robosUsers.filter(robots => {\n            return(\n                robots.name.toLowerCase().includes(text.toLowerCase())\n            );\n        });\n        setSearchResults(filteredRobots);\n    }, [text,robosUsers])\n\n    const newRobot = searchResults;\n\n    return(\n        <div className=\"tc\">\n            <Scroll>\n                <h1 className=\"f2\">RoboFriends</h1>\n                <SearchBox SearchChange={ onSearchChange }/>\n            </Scroll>\n                {\n                    text === \"\" ? <CardList robots={ robosUsers }/> : <CardList robots={ newRobot }/>\n                }\n        </div>\n    );\n}\n\nexport default App;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const FETCH_PRODUCTS_PENDING = 'FETCH_PRODUCTS_PENDING';\nexport const FETCH_PRODUCTS_SUCCESS = 'FETCH_PRODUCTS_SUCCESS';\nexport const FETCH_PRODUCTS_ERROR = 'FETCH_PRODUCTS_ERROR';\n\nexport const setSearchField = (text) => {\n    return{\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: FETCH_PRODUCTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then(data => dispatch({ type: FETCH_PRODUCTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: FETCH_PRODUCTS_ERROR, payload: error }))\n}\n","import { CHANGE_SEARCH_FIELD, FETCH_PRODUCTS_PENDING, FETCH_PRODUCTS_SUCCESS, FETCH_PRODUCTS_ERROR } from './action'\n\nconst initialState = {\n    searchField: '',\n}\n\nexport const searchRobots = ( state = initialState , { type, payload } ) => {\n    switch(type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, \n                searchField: payload \n            }\n        default: \n            return state;\n    }\n}\n\nconst robotInitialState = {\n    pending: false,\n    users: [],\n    error: null\n}\n\nexport const getRobotsReducer = ( state = robotInitialState, action ) => {\n    switch(action.type) {\n        case FETCH_PRODUCTS_PENDING: \n            return {\n                ...state,\n                pending: true\n            }\n        case FETCH_PRODUCTS_SUCCESS:\n            return {\n                ...state,\n                pending: false,\n                users: action.payload\n            }\n        case FETCH_PRODUCTS_ERROR:\n            return {\n                ...state,\n                pending: false,\n                error: action.error\n            }\n        default: \n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleWare from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './style/index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, getRobotsReducer } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, getRobotsReducer });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleWare, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}